<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Richard Stewing - Blog</title>
  <atom:link href="https://stewing.dev/blog.xml" rel="self" type="application/rss+xml" />
  <link>https://stewing.dev</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Fri, 02 Apr 2021 22:35:48 +0200</pubDate>
  <lastBuildDate>Fri, 02 Apr 2021 22:35:48 +0200</lastBuildDate>
  <generator>Emacs 27.2 Org-mode 9.3.7</generator>
  <webMaster>richard@stewing.dev (Richard Stewing)</webMaster>
  <image>
    <url>https://stewing.dev/img/logo-full-size.png</url>
    <title>Richard Stewing - Blog</title>
    <link>https://stewing.dev</link>
  </image>


  <item>
    <title>Version Control for the Uninigiated</title>
    <link>https://stewing.dev/html/git.html</link>
    <author>richard@stewing.dev (Richard Stewing)</author>
    <guid isPermaLink="false">https://stewing.dev/html/git.html</guid>
    <pubDate>Fri, 16 Oct 2020 11:40:00 +0200</pubDate>

    <description><![CDATA[<p>
    The Covid19-Pandemic forced all of society to start adopting to digital infrastructure. 
    The Pandemic education sector incredibly hard. 
    This fact (probably) holds for the whole world. 
    German high-schools had to catch up to years of basically not evolving.
    </p>

    <p>
    When politicians decided that schools are going all-digital, I was hoping they would spend some time teaching kids some useful skills around the tools they could use to accomplish school tasks.
    One pet-peeve of mine is version control. 
    </p>
    ]]></description>
  </item>


  <item>
    <title>Competing with Unicorns</title>
    <link>https://stewing.dev/html/competing_with_unicorns.html</link>
    <author>richard@stewing.dev (Richard Stewing)</author>
    <guid isPermaLink="false">https://stewing.dev/html/competing_with_unicorns.html</guid>
    <pubDate>Sat, 19 Dec 2020 16:10:00 +0100</pubDate>

    <description><![CDATA[<p>
    I keep a list of books I have read and what I thought about them for future reference later. 
    These thoughts are only for me to remind myself of what I felt while reading it. 
    I forgot so much about the other books I read, and I feel like this should help with that. 
    I usually don't care if there are a bunch of errors in these notes. 
    Therefore they are cheap to create for me. 
    This piece will be a little different. 
    I have so many thoughts about <i>Competing with Unicorns</i> by Jonathan Rasmusson that I felt the need to sort my thoughts more thoroughly. 
    If you want the one-sentence summary: ''Spotify is a great company to work for, and its management style is superior to anything else.''
    I'm not saying the statement is wrong, but it's so unreflected and uncritical. I will get to more details soon, but this is my first impression.
    </p>
    ]]></description>
  </item>

  <item>
    <title>Idris' most important Feature</title>
    <link>https://stewing.dev/html/holes.html</link>
    <author>richard@stewing.dev (Richard Stewing)</author>
    <guid isPermaLink="false">https://stewing.dev/html/holes.html</guid>
    <pubDate>Mon, 01 Feb 2021 15:40:00 +0100</pubDate>

    <description><![CDATA[<p>
    Yesterday I saw this discussion on <a href="https://news.ycombinator.com/item?id=25978190">HN</a>. 
    The author points out that ''static typing is pointless'' because the static type checker is just a crappy tool to encode simple invariants. (<a href="https://medium.com/better-programming/why-i-still-lisp-and-you-should-too-18a2ae36bd8">Link</a>)
    More interesting invariants still need to be expressed in the documentation. 
    I condensed his argument here. 
    The essence is: Static Type Systems can't encode interesting invariants efficiently and make you jump through hoops for simple ones. 
    So he rather not have these hoops and use dynamic types.
    </p>
    ]]></description>
  </item>


  <item>
    <title>Wishlist for verified Programming</title>
    <link>https://stewing.dev/html/wishlist.html</link>
    <author>richard@stewing.dev (Richard Stewing)</author>
    <guid isPermaLink="false">https://stewing.dev/html/wishlist.html</guid>
    <pubDate>Sun, 28 Mar 2021 17:00:00 +0200</pubDate>

    <description><![CDATA[<p>
    Verified Programming and, by extension, Verification Driven Development (VDD) focuses on writing programs that conform provably to a given specification. 
    Whenever I use a tool that supports VDD, something is always missing. 
    This post will list all the things I wish I had when programming in a verified manner. 
    I'll start with a survey of what is currently out there. 
    (At least what I'm aware of.) 
    I'll focus on the things I have used personally. 
    As such, my view is by necessity limited. 
    I do think that most of these tools are very similar and, more importantly, most are research projects. 
    Their primary purpose isn't using them in production, and ergonomics are often less critical. 
    I want verified programming to become more mainstream, but it can only become mainstream if it becomes more ergonomic. 
    That's why I started working on this list. 
    But first, let's start with what's already there.
    </p>
    ]]></description>
  </item>
</channel>
</rss>
